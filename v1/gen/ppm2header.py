# This file was mostly generated by chatgpt-4o
import sys
import struct
import re
import os

def parse_ppm_header(f):
    """Parse the PPM header and return width, height, and maxval."""
    header = f.readline().decode().strip()
    if header != 'P6':
        raise ValueError("Only P6 PPM format is supported")

    # Read any comment lines starting with '#'
    while True:
        line = f.readline().decode().strip()
        if line.startswith('#'):
            continue
        width, height = map(int, line.split())
        break

    maxval = int(f.readline().decode().strip())
    if maxval != 255:
        raise ValueError("Only 8-bit PPM files are supported (maxval = 255)")

    return width, height

def convert_rgb_to_a4r4g4b4(r, g, b):
    """Convert 8-bit RGB values to A4R4G4B4 format."""
    a = 0xF  # Assume alpha is fully opaque
    r4 = r >> 4
    g4 = g >> 4
    b4 = b >> 4
    return (a << 12) | (r4 << 8) | (g4 << 4) | b4

def read_ppm_data(f, width, height):
    """Read the binary pixel data from the PPM file."""
    pixel_data = []
    for _ in range(width * height):
        r, g, b = struct.unpack('BBB', f.read(3))  # Read 3 bytes (RGB)
        pixel_data.append(convert_rgb_to_a4r4g4b4(r, g, b))
    return pixel_data

def write_c_header(filename, name, width, height, pixel_data):
    """Write the C header with pixel data and dimensions."""
    with open(filename, 'w') as header:
        header.write(f'#ifndef {name.upper()}_H\n')
        header.write(f'#define {name.upper()}_H\n\n')
        header.write('#include <stdint.h>\n\n')
        header.write(f'#define {name}_width {width}\n')
        header.write(f'#define {name}_height {height}\n\n')
        header.write(f'static const uint16_t {name}_data[] = {{\n')

        # Write pixel data, 8 values per line
        for i in range(0, len(pixel_data), 8):
            line_data = ', '.join(f'0x{pixel:04X}' for pixel in pixel_data[i:i + 8])
            header.write(f'    {line_data},\n')

        header.write('};\n\n')
        header.write(f'#endif // {name.upper()}_H\n')

def main():
    if len(sys.argv) < 3:
        print("Usage: python script.py <input.ppm> <output.h> [x,y for trans]")
        sys.exit(1)

    ppm_file = sys.argv[1]
    header_file = sys.argv[2]
    name = os.path.basename(header_file).rsplit('.', 1)[0]

    # Open and parse the PPM file
    with open(ppm_file, 'rb') as f:
        width, height = parse_ppm_header(f)
        pixel_data = read_ppm_data(f, width, height)

    if len(sys.argv) > 3:
        match = re.match(r"(\d),(\d)", sys.argv[3])
        if match:
            tx = int(match.group(1))
            ty = int(match.group(2))
            tclear = pixel_data[tx + ty * width]
            print(f"Clearing pixels of color 0x{tclear:04x}\n")
            for i in range(len(pixel_data)):
                if pixel_data[i] == tclear:
                    pixel_data[i] = 0

    # Write the C header
    write_c_header(header_file, name, width, height, pixel_data)

if __name__ == "__main__":
    main()
